\chapter{实例：mini-notify——代码插入与函数劫持在VxWorks中的实现}


\section{背景}

\subsection{Linux下的文件监控系统inotify介绍}

\subsection{VxWorks下的dosFs文件系统}

VxWorks文件系统中的dosFs是MS-DOS兼容的文件系统，
可基于块对物理介质进行操作。
它提供极大的灵活性以满足实时应用的各种要求。
在VxWorks操作系统中，
文件系统的位置位于IO系统和驱动程序之间。
它们之间的层次结构如图\ref{iosys}所示。

\begin{figure}[h!]
    \centering
    \includegraphics[width=0.21\textwidth]{figure/IOsys.eps}
    \caption{VxWorks中的IO系统图示}
    \label{iosys}
\end{figure}

具体到某个文件操作，例如open操作。
应用程序可以调用
库函数或者直接使用IO函数的时候，
他们都会调用dosFs中的dosFsOpen函数，
进而再调用驱动程序对应的函数。
最后达到访问硬件的目的。整个流程如图\ref{open}

\begin{figure}[h!]
    \centering
\includegraphics[width=0.58\textwidth]{figure/open.eps}
    \caption{打开一个文件的函数调用流程}
    \label{open}
\end{figure}

\section{mini-notify的目标与意义}

\subsection{目标}

mini-notify的目的是监控VxWorks下dosFs文件系统的变化，
捕获所有针对该文件系统下的任何操作，例如对文件的读和写。
并获取该操作的有关信息，
并通过一定手段向“外界”传达该信息。

mini-notify的原理如图\ref{mini0}所示

\begin{figure}[h!]
    \centering
\includegraphics[width=0.59\textwidth]{figure/mini0.eps}
    \caption{mini-notify运行原理}
    \label{mini0}
\end{figure}

其中，mini-notify需要截获的文件系统操作包括：

\begin{itemize}
  \item open
  \item close
  \item read
  \item write
  \item create
  \item delete 
\end{itemize}

mini-notify需要截获并向外界监控系统报告的信息有：

\begin{itemize}
  \item 文件操作的名称（例如：read）
  \item 文件操作的具体路径（例如：/DOS/test）
  \item 系统的当前时间
\end{itemize}


\section{环境搭建与配置}

为了把精力集中于二进制层面的插入和劫持工作，
而不是目标版的连接与调试，
我们使用Vmware虚拟机来运行一个VxWorks操作系统。
这意味着我们只需要一台x86的PC就可以完成所有工作。
然而实际上我使用了两个平台：
\begin{itemize}
  \item 一台x86的Linux机器用于修改VxWorks系统映像。
  \item 一台x86的Windows机器用于运行Tornado和Vmware。
\end{itemize}

\subsection{Linux主机}

Linux主机的环境主要为我的修改工作
提供便利的工具，特别是一些GNU实用工具，
例如readelf和objdump。

安装的Linux发行版为Ubuntu 13.10的32位版本，Linux内核版本为3.11。

\subsection{Windows主机与VxWorks虚拟机}

Windows主机的主要任务包含以下几点：

\begin{itemize}
  \item 运行Tornado 2.2，生成引导程序和VxWorks系统镜像。
  \item 运行FTP Server，供目标机下载镜像。
  \item 运行Vmware 9，运行引导程序和VxWorks系统镜像。
  \item 运行Target Sever，用于与目标机通信。
\end{itemize}

图\ref{win}说明了在Windows主机下
各个软件机虚拟机的运行情况。

\begin{figure}[h!]
    \centering
    \includegraphics[width=0.68\textwidth]{figure/win.eps}
    \caption{Windows主机下的软件和虚拟机}
    \label{win}
\end{figure}

其中，在Vmware中下载VxWorks镜像，
需要首先载入bootloader，
实现的方式就不再赘述了。
在此我们可以简单地认为Tornado生成了VxWorks镜像，
而在虚拟机中即可通过FTP按照一定的路径找到该镜像
并下载。
因此，我们只需要修改该路径下的镜像文件，
并替换掉原来的文件，
当虚拟机重启后，
就会下载我们修改过的镜像文件。

\section{mini-notify方案设计}

\section{mini-notify的实现}

\section{测试与评价}
